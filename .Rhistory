ggplot(a, aes(a$Axis1, a$Axis3, label= a$ID, color=(a$sp))) + geom_text(size=3, alpha=.8, cex=4, position="jitter") + theme(panel.background = element_blank(), panel.grid.major = element_blank(), panel.grid.minor=element_blank(), axis.line = element_line(size = .3), legend.position="none") + stat_ellipse(level=.95, linetype=1) + labs(x="PCA1", y="PCA3", title="PCA of C. regis (blue) and C. hubbsi (red) in northern Gulf")
ggplot(a, aes(a$Axis1, a$Axis4, label= a$ID, color=(a$sp))) + geom_text(size=3, alpha=.8, cex=4, position="jitter") + theme(panel.background = element_blank(), panel.grid.major = element_blank(), panel.grid.minor=element_blank(), axis.line = element_line(size = .3), legend.position="none") + stat_ellipse(level=.95, linetype=1) + labs(x="PCA1", y="PCA4", title="PCA of C. regis (blue) and C. hubbsi (red) in northern Gulf")
#Greer's data
b <- read.csv("/Users/Clive/Desktop//Gmi-Gde MSAT data 11May2015_gulfPCA.csv")
ggplot(b, aes(a$Axis1, a$Axis2, label= a$pop, color=(a$sp))) + geom_text(size=3, alpha=.8, cex=4, position="jitter") + theme(panel.background = element_blank(), panel.grid.major = element_blank(), panel.grid.minor=element_blank(), axis.line = element_line(size = .3), legend.position="none") + stat_ellipse(level=.95, linetype=1) + labs(x="PCA1", y="PCA3", title="PCA of G. mirabilis (blue) and detrusus (red) in northern Gulf")
source("~/GitHub/PyRate-master/pyrate_utilities.r")
extract.ages(file="~/GitHub/PyRate-master/example_files/Ursidae.txt", replicates=10)
version
version
setwd("~/GitHub/macroevo")
par(mfrow = c(1,1))
displace <- rnorm(100)
plot(displace)
library(geiger)
x <- cumsum(displace)
plot(x, type = "l", xlab = "Time", ylab = "Trait Value")
cols<-rainbow(50) # put 50 samples from the rainbow pallette into a new vector called cols
plot(cumsum(rnorm(100)), type="l", ylim=c(-30,30))
for(i in 1:length(cols)) lines(cumsum(rnorm(100)), col=cols[i]) # simple for loop for each of the 50 colour samples we draw a line on the plot that is the cumulative summation of 100 draws from a normal distribution.
cols<-rainbow(50) # put 50 samples from the rainbow pallette into a new vector called cols
plot(cumsum(rnorm(1000)), type="l", ylim=c(-30,30))
for(i in 1:length(cols))
lines(cumsum(rnorm(1000)), col=cols[i]) # simple for loop for each of the 50 colour samples we draw a line on the plot that is the cumulative summation of 100 draws from a normal distribution.
plot(cumsum(rnorm(1000)), type="l", ylim=c(-300,300))
for(i in 1:length(cols))
lines(cumsum(rnorm(1000)), col=cols[i]) # simple for loop for each of the 50 colour samples we draw a line on the plot that is the cumulative summation of 100 draws from a normal distribution.
plot(cumsum(rnorm(1000)), type="l", ylim=c(-100,100))
for(i in 1:length(cols))
lines(cumsum(rnorm(1000)), col=cols[i]) # simple for loop for each of the 50 colour samples we draw a line on the plot that is the cumulative summation of 100 draws from a normal distribution.
plot(cumsum(rnorm(1000)), type="l", ylim=c(-100,100))
for(i in 1:length(cols))
lines(cumsum(rnorm(1000)), col=cols[i]) # simple for loop for each of the 50 colour samples we draw a line on the plot that is the cumulative summation of 100 draws from a normal distribution.
cols
par(mfrow = c(2,1))
plot(cumsum(rnorm(50)), type="l", ylim=c(100,100))
for(i in 1:length(50))
lines(cumsum(rnorm(50)), col="blue")
plot(cumsum(rnorm(100)), type="l", ylim=c(100,100))
for(i in 1:length(100))
lines(cumsum(rnorm(50)), col="red")
par(mfrow = c(1,2))
plot(cumsum(rnorm(50)), type="l", ylim=c(100,100))
for(i in 1:length(50))
lines(cumsum(rnorm(50)), col="blue")
plot(cumsum(rnorm(100)), type="l", ylim=c(100,100))
for(i in 1:length(100))
lines(cumsum(rnorm(50)), col="red")
par(mfrow = c(2,1))
plot(cumsum(rnorm(50)), type="l", ylim=c(-100,100))
for(i in 1:length(50))
lines(cumsum(rnorm(50)), col="blue")
plot(cumsum(rnorm(100)), type="l", ylim=c(-100,100))
for(i in 1:length(100))
lines(cumsum(rnorm(50)), col="red")
par(mfrow = c(1,2))
plot(cumsum(rnorm(50)), type="l", ylim=c(-100,100))
for(i in 1:length(50))
lines(cumsum(rnorm(50)), col="blue")
plot(cumsum(rnorm(100)), type="l", ylim=c(-100,100))
for(i in 1:length(100))
lines(cumsum(rnorm(50)), col="red")
par(mfrow = c(1,2))
plot(cumsum(rnorm(50)), type="l", ylim=c(-100,100))
for(i in 1:50)
lines(cumsum(rnorm(50)), col="blue")
plot(cumsum(rnorm(100)), type="l", ylim=c(-100,100))
for(i in 1:50)
lines(cumsum(rnorm(50)), col="red")
par(mfrow = c(1,2))
plot(cumsum(rnorm(50)), type="l", ylim=c(-100,100))
for(i in 1:50)
lines(cumsum(rnorm(50)), col="blue")
plot(cumsum(rnorm(100)), type="l", ylim=c(-100,100))
for(i in 1:50)
lines(cumsum(rnorm(100)), col="red")
par(mfrow = c(1,2))
plot(cumsum(rnorm(50)), type="l", ylim=c(-50,50))
for(i in 1:50)
lines(cumsum(rnorm(50)), col="blue")
plot(cumsum(rnorm(100)), type="l", ylim=c(-50,50))
for(i in 1:50)
lines(cumsum(rnorm(100)), col="red")
par(mfrow = c(1,2))
plot(cumsum(rnorm(50)), type="l", ylim=c(-50,50), main="Effect of time under BM")
for(i in 1:50)
lines(cumsum(rnorm(50)), col="blue")
plot(cumsum(rnorm(100)), type="l", ylim=c(-50,50))
for(i in 1:50)
lines(cumsum(rnorm(100)), col="red")
par(mfrow = c(1,1))
par(mfcol = c(1,1))
par(mfcol = c(1,2))
plot(cumsum(rnorm(50)), type="l", ylim=c(-50,50), main="Effect of time under BM")
for(i in 1:50)
plot(cumsum(rnorm(100)), type="l", ylim=c(-50,50))
lines(cumsum(rnorm(50)), col="blue")
for(i in 1:50)
lines(cumsum(rnorm(100)), col="red")
par(mfcol = c(2,1))
plot(cumsum(rnorm(50)), type="l", ylim=c(-50,50), main="Effect of time under BM")
for(i in 1:50)
lines(cumsum(rnorm(50)), col="blue")
plot(cumsum(rnorm(100)), type="l", ylim=c(-50,50))
for(i in 1:50)
lines(cumsum(rnorm(100)), col="red")
par(mfrow = c(1,2))
plot(cumsum(rnorm(50)), type="l", ylim=c(-50,50), main="Effect of time under BM")
for(i in 1:50)
lines(cumsum(rnorm(50)), col="blue")
plot(cumsum(rnorm(100)), type="l", ylim=c(-50,50))
for(i in 1:50)
lines(cumsum(rnorm(100)), col="red")
par(mfcol = c(1,1))
plot(cumsum(rnorm(100)), type="l", ylim=c(-80,80), ylab="Trait", col="blue")
for(i in 1:20) lines(cumsum(rnorm(100)), col="blue")
for(i in 1:20) lines(cumsum(rnorm(100, sd=5)), col="green")
cols<-rainbow(50) # put 50 samples from the rainbow pallette into a new vector called cols
plot(cumsum(rnorm(1000)), type="l", ylim=c(-100,100))
for(i in 1:length(cols))
lines(cumsum(rnorm(1000)), col=cols[i]) # simple for loop for each of the 50 colour samples we draw a line on the plot that is the cumulative summation of 100 draws from a normal distribution.
par(mfrow = c(1,1))
displace <- rnorm(100)  #series of draws from normal distribution
plot(displace)
library(geiger)
x <- cumsum(displace)    #cumulative sum through time
plot(x, type = "l", xlab = "Time", ylab = "Trait Value")
par(mfrow = c(1,1))
displace <- rnorm(100)  #series of draws from normal distribution
plot(displace)
library(geiger)
x <- cumsum(displace)    #cumulative sum through time
plot(x, type = "l", xlab = "Time", ylab = "Trait Value")
par(mfrow = c(1,1))
displace <- rnorm(100)  #series of draws from normal distribution
plot(displace)
library(geiger)
x <- cumsum(displace)    #cumulative sum through time
plot(x, type = "l", xlab = "Time", ylab = "Trait Value")
par(mfrow = c(1,1))
displace <- rnorm(1000)  #series of draws from normal distribution
plot(displace)
library(geiger)
x <- cumsum(displace)    #cumulative sum through time
plot(x, type = "l", xlab = "Time", ylab = "Trait Value")
tree<-read.tree(text="((grizzlybear:1, polarbear:1):4, spectacledbear:5);")
plot(tree)
nodelabels()
axisPhylo()
rootMass <- 250 # size of ancestor
sigmasq = 2.5 # Brownian rate
time = 5 # 5 million years of independent evolution from the root
sd <- sqrt(time * sigmasq) # Brownian evolution is proportional to rate X time)
specbearDeltaMass <- rnorm(1, mean = 0, sd = sd)
specbearMass <- rootMass + specbearDeltaMass
specbearMass
specbearDeltaMass <- rnorm(1, mean = 250, sd = sd)
specbearDeltaMass
specbearDeltaMass<-rnorm(1, mean=0, sd=sqrt(sigmasq*tree$edge.length[1])) # in R, tree tip labels are numbered from top to bottomw, so in our tree spectacled bear = 1, polarbear = 2, and grizzly = 3
specbearMass <- rootMass + specbearDeltaMass
specbearMass
library(geiger)
library(phytools)
library(diversitree)
install.packages('diversitree')
library(diversitree)
source('rabosky_functions.R')
# Using function simulateTree to simulate a birth death tree:
# Example, lambda = 10, mu = 5
pars <- c(10, 0); #in order: lambda, mu
tt <- simulateTree(pars, max.taxa=100)
##simulate under BD and fit gamma
## is confidence in speciation or extinction better?
## regression
## show loop construct
## pull lambda and mu
plot(tt,  show.tip.label = F)
rm(list = ls())
library(geiger)
library(phytools)
library(diversitree)
source('rabosky_functions.R')
# Using function simulateTree to simulate a birth death tree:
# Example, lambda = 10, mu = 5
pars <- c(10, 0); #in order: lambda, mu
tt <- simulateTree(pars, max.taxa=100)
##simulate under BD and fit gamma
## is confidence in speciation or extinction better?
## regression
## show loop construct
plot(tt,  show.tip.label = F)
## pull lambda and mu
?file.choose
file.choose
tt.func <- make.bd(tt)
fitDiversitree(tt.func)
head(tt.func)
tt.func
?tt.func
?numeric
tt.func
?make.bd
REPS <- 5
myResults <- numeric(REPS)
myResults
for (i in 1:REPS){
#  Here we would do the simulation:
tmp <- rnorm(1)
#   tmp is now the result of our simulation.
#   We will now store it in the results vector:
myResults[i] <- tmp
}
myResults
?rnorm
rnorm(1)
rnorm(2)
REPS <- 100
myResults <- numeric(REPS)
for (i in 1:REPS){
#  Here we would do the simulation:
pars <- c(10, 0); #in order: lambda, mu
tmp <- simulateTree(pars, max.taxa=100)
#   tmp is now the result of our simulation.
#   We will now store it in the results vector:
myResults[i] <- tmp
}
warnings()
REPS <- 100
myResults <- numeric(REPS)
myResults
tt
rm(list = ls())
REPS <- 100
myResults <- numeric(REPS)
for (i in 1:REPS){
#  Here we would do the simulation:
pars <- c(10, 0); #in order: lambda, mu
tmp <- simulateTree(pars, max.taxa=100)
#   tmp is now the result of our simulation.
#   We will now store it in the results vector:
myResults[i] <- tmp
}
rm(list = ls())
library(geiger)
library(phytools)
library(diversitree)
source('rabosky_functions.R')
REPS <- 100
myResults <- numeric(REPS)
for (i in 1:REPS){
#  Here we would do the simulation:
pars <- c(10, 0); #in order: lambda, mu
tmp <- simulateTree(pars, max.taxa=100)
#   tmp is now the result of our simulation.
#   We will now store it in the results vector:
myResults[i] <- tmp
}
tmp
plot(tmp, show.tip.label = F)
c(0, 0)
pars <- c(10, 0); #in order: lambda, mu
tmp <- simulateTree(pars, max.taxa=100)
c(0, 0) <- tmp
pars <- c(10, 0); #in order: lambda, mu
tmp <- simulateTree(pars, max.taxa=100)
c(0, 0, 0, 0, 0) <- tmp
pars <- c(10, 0); #in order: lambda, mu
tmp <- simulateTree(pars, max.taxa=100)
numeric(5) <- tmp
tmp
numeric(5) <- tmp
numeric(5) <- tmp [$lambda]
numeric(5) <- tmp $lambda
numeric(100) <- tmp $lambda
tmp $lambda
tmp $pars
tmp
REPS <- 100
myResults <- numeric(REPS)
for (i in 1:REPS){
#  Here we would do the simulation:
pars <- c(10, 0); #in order: lambda, mu
tt <- simulateTree(pars, max.taxa=100)
tt.func <- make.bd(tt)
tmp <- fitDiversitree(tt.func)
myResults[i] <- tmp $pars
}
warnings()
tmp$pars
tmp$pars$lambda
tmp$pars[["lambda"]]
REPS <- 100
lamdaVal <- numeric(REPS)
muVal <- numeric(REPS)
for (i in 1:REPS){
#  Here we would do the simulation:
pars <- c(10, 0); #in order: lambda, mu
tt <- simulateTree(pars, max.taxa=100)
tt.func <- make.bd(tt)
tmp <- fitDiversitree(tt.func)
lambdaVal[i] <- tmp $pars[["lambda"]]
muVal[i] <- tmp $pars[["mu"]]
}
REPS <- 100
lambdaVal <- numeric(REPS)
muVal <- numeric(REPS)
for (i in 1:REPS){
#  Here we would do the simulation:
pars <- c(10, 0); #in order: lambda, mu
tt <- simulateTree(pars, max.taxa=100)
tt.func <- make.bd(tt)
tmp <- fitDiversitree(tt.func)
lambdaVal[i] <- tmp $pars[["lambda"]]
muVal[i] <- tmp $pars[["mu"]]
}
lambdaVal
muVal
for (i in 1:REPS){
#  Here we would do the simulation:
pars <- c(10, 0); #in order: lambda, mu
tt <- simulateTree(pars, max.taxa=100)
tt.func <- make.bd(tt)
tmp <- fitDiversitree(tt.func)
lambdaVal[i] <- tmp $pars["lambda"]
muVal[i] <- tmp $pars["mu"]
}
lambdaVal
muVal
foo <- list( str='R', vec=c(1,2,3), bool=TRUE )
foo
tmp
tmp [["lambda"]]
tmp [[lambda]]
tmp [lambda]
tmp [["pars"]]
tmp [["pars"]][["lambda"]]
foo <- list( str='R', vec=c(1,2,3), bool=TRUE )
foo
i <- c(0)
#  Here we would do the simulation:
pars <- c(10, 0); #in order: lambda, mu
tt <- simulateTree(pars, max.taxa=100)
tt.func <- make.bd(tt)
tmp <- fitDiversitree(tt.func)
lambdaVal[i] <- tmp $pars["lambda"]
lambdaVal
i <- c(0)
#  Here we would do the simulation:
pars <- c(10, 0); #in order: lambda, mu
tt <- simulateTree(pars, max.taxa=100)
tt.func <- make.bd(tt)
tmp <- fitDiversitree(tt.func)
lambdaVal[i] <- tmp $pars["lambda"]
lambdaVal
lambdaVal[i] <- c(0)
#  Here we would do the simulation:
pars <- c(10, 0); #in order: lambda, mu
tt <- simulateTree(pars, max.taxa=100)
tt.func <- make.bd(tt)
tmp <- fitDiversitree(tt.func)
lambdaVal[i] <- tmp $pars["lambda"]
lambdaVal
REPS <- 100
lambdaVal <- numeric(REPS)
muVal <- numeric(REPS)
for (i in 1:REPS){
#  Here we would do the simulation:
pars <- c(10, 0); #in order: lambda, mu
tt <- simulateTree(pars, max.taxa=100)
tt.func <- make.bd(tt)
tmp <- fitDiversitree(tt.func)
lambdaVal[i] <- tmp $pars["lambda"]
muVal[i] <- tmp $pars["mu"]
}
lambdaVal
muVal
mean(lambdaVal)
mean(lambdaVal)
mean(muVal)
sd(lambdaVal)
mean(muVal)
sd(muVal)
tmp
tree <- simulateTree
tree
tree <- simulateTree(c(10,0))
tree <- simulateTree(c(10,0), max.taxa = 100)
tree
class(tree)
tree $Nnode
tree$tip.label
tree$edge.length
tree$tip.label
length(tree$tip.label)
taxon_count[i] <- length(tree$tip.label)
REPS <- 100
taxon_count <- numeric(REPS)
for (i in 1:REPS){
tree <- simulateTree(c(10,0), max.taxa = 100)
taxon_count[i] <- length(tree$tip.label)
}
taxon_count
?simulateTree
simulateTree(c(10,2))
REPS <- 100
taxon_count <- numeric(REPS)
tree <- simulateTree(c(10,5), max.taxa = 100)
for (i in 1:REPS){
taxon_count[i] <- length(tree$tip.label)
}
taxon_count
hist(taxon_count)
?hist
hist(taxon_count,xlim= (0,100))
hist(taxon_count,xlim= 0)
hist(taxon_count,xlim= 100)
hist(taxon_count,xlim = "0,100")
hist(taxon_count)
rnorm(10)
hist(rnorm(10))
hist(taxon_count)
simulateTree(C(10, 5))
simulateTree(C(10,5))
pars <- c(10, 5)
simulateTree(pars)
pars <- c(10, 5)
tree <- simulateTree(pars, max.t = 100)
pars <- c(10, 5)
tree <- simulateTree(pars, max.t = 10)
tree <- simulateTree(pars, max.taxa = 5)
taxon_count[i] <- length(tree$tip.label)
taxon_count
pars <- c(10, 5)
tree <- simulateTree(pars, max.taxa = 5)
tree
plot(tree)
pars <- c(10, 5)
tree <- simulateTree(pars, max.taxa = 100)
plot(tree)
tree
REPS <- 100
lambdaVal <- numeric(REPS)
muVal <- numeric(REPS)
for (i in 1:REPS){
#  Here we would do the simulation:
pars <- c(10, 5); #in order: lambda, mu
tt <- simulateTree(pars, max.taxa=100)
tt.func <- make.bd(tt)
tmp <- fitDiversitree(tt.func)
lambdaVal[i] <- tmp $pars["lambda"]
muVal[i] <- tmp $pars["mu"]
}
lambdaVal
muVal
mean(lambdaVal)
sd(lambdaVal)
mean(muVal)
sd(muVal)
REPS <- 100
lambdaVal <- numeric(REPS)
muVal <- numeric(REPS)
for (i in 1:REPS){
#  Here we would do the simulation:
pars <- c(10, 10); #in order: lambda, mu
tt <- simulateTree(pars, max.taxa=100)
tt.func <- make.bd(tt)
tmp <- fitDiversitree(tt.func)
lambdaVal[i] <- tmp $pars["lambda"]
muVal[i] <- tmp $pars["mu"]
}
lambdaVal
muVal
mean(lambdaVal)
sd(lambdaVal)
mean(muVal)
sd(muVal)
hist(lambdaVal)
par(mfrow = c(2,1))
hist(lambdaVal)
hist(muVal)
REPS <- 100
lambdaVal <- numeric(REPS)
muVal <- numeric(REPS)
for (i in 1:REPS){
#  Here we would do the simulation:
pars <- c(2, 2); #in order: lambda, mu
tt <- simulateTree(pars, max.taxa=100)
tt.func <- make.bd(tt)
tmp <- fitDiversitree(tt.func)
lambdaVal[i] <- tmp $pars["lambda"]
muVal[i] <- tmp $pars["mu"]
}
REPS <- 100
lambdaVal <- numeric(REPS)
muVal <- numeric(REPS)
for (i in 1:REPS){
#  Here we would do the simulation:
pars <- c(10, 5); #in order: lambda, mu
tt <- simulateTree(pars, max.taxa=100)
tt.func <- make.bd(tt)
tmp <- fitDiversitree(tt.func)
lambdaVal[i] <- tmp $pars["lambda"]
muVal[i] <- tmp $pars["mu"]
}
par(mfrow = c(2,1))
hist(lambdaVal)
hist(muVal)
lines(x = 10)
line(x = 10)
?lines
par(mfrow = c(2,1))
hist(lambdaVal)
hist(muVal)
